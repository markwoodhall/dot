#+TITLE:  System Config
#+AUTHOR: Mark Woodhall
#+PROPERTY: header-args :mkdirp yes

* About

  This document is a literate version of my system config and includes core tools and applications used often. 

  The code blocks here are tangled to their relevant files.

  These blocks are tangled using a poor mans version of emacs orgmode code tangling, as found in [[https://github.com/markwoodhall/dot/blob/main/.config/nvim/fnl/modules/vabel.fnl#L123][my neovim config]].

* Xorg

** xinit

xinitrc starts awesome as well as doing some keyring init

Because of how early these files are needed, they are probably still checked into source control, even though
they are generated from this file.

#+begin_src bash :tangle ~/.xinitrc :shebang #!/bin/bash
if [ -d /etc/X11/xinit/xinitrc.d ] ; then
 for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
  [ -x "$f" ] && . "$f"
 done
 unset f
fi
exec awesome
eval $(/usr/bin/gnome-keyring-daemon --start --components=pgpg,kcs11,secrets,ssh)

export GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPG_AGENT_INFO SSH_AUTH_SOCK
source /etc/X11/xinit/xinitrc.d/50-systemd-user.sh
#+end_src

* Readline
  
  Set vi editing mode for readline

#+begin_src bash :tangle ~/.inputrc
set editing-mode vi
#+end_src

* Awesome

Awesome is configured using fennel, but we need to bootstrap it with a lua file.

This also relies on the fennel module in the same directory.

#+begin_src lua :tangle ~/.config/awesome/rc.lua :mkdirp yes
local fennel = require("./fennel").install()
fennel.path = fennel.path .. ";.config/awesome/?.fnl"
require("config")
#+end_src

* ZSH

** profile

#+begin_src bash :tangle ~/.zprofile
if [ -z "$DISPLAY" ] && [ -n "$XDG_VTNR" ] && [ "$XDG_VTNR" -eq 1 ]; then
  exec startx
fi
#+end_src

** env

*** Home dir and PATH

#+begin_src bash :tangle ~/.zshenv
homedir=~
eval homedir=$homedir
# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:/home/markwoodhall/.local/share/gem/ruby/3.0.0/bin:/home/markwoodhall/.cargo/bin:$HOME/.emacs.d/bin/:/usr/share/idea/bin/:/home/markwoodhall/.luarocks:$PATH
export EVENT_NOKQUEUE=1
#+end_src

*** Aliases

#+begin_src bash :tangle ~/.zshenv
alias ls='ls -lGfh'
alias l='ls'
alias cd='cd -P'
alias c='cd -P'
alias mkdir='mkdir -p'
alias cat='ccat'

alias v='nvim'
alias vi='nvim'
alias vmi='nvim'
alias vim='nvim'
alias cl='clear'
alias clean='clear'

alias tmx='tmux'
alias tmxns='tmx new -s'
alias tmxls='tmx list-sessions'
alias tmxrw='tmx rename-window'
alias tmxd='tmx detach'
alias tmxa='tmx attach -t'
alias tmxs='tmx switch -t'
alias tmxk='tmx kill-session -t'
#+end_src

*** Setup

#+begin_src bash :tangle ~/.zshenv
set -o vi
set editing-mode vi

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export SHELL=zsh
export EDITOR='nvim'

export ANDROID_HOME=/opt/android-sdk
export NODE_ENV="development"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

ssh-add -A &> /dev/null

SSH_ENV="$HOME/.ssh/environment"
function start_agent {
   echo "Initialising new SSH agent..."
   /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
   echo succeeded
   chmod 600 "${SSH_ENV}"
   . "${SSH_ENV}" > /dev/null
   /usr/bin/ssh-add -t 999999  ~/.ssh/id_rsa;
}

if [ -f "${SSH_ENV}" ]; then
   . "${SSH_ENV}" > /dev/null
   ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
      start_agent;
   }
else
   start_agent;
fi 

# fh - repeat history
runcmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, <>' ; }

fh() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | runcmd
}

# fhe - repeat history edit
writecmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, do{ chomp($_ = <>); $_ }' ; }

fhe() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | writecmd
}

fzfp() {
fzf --preview '[[ $(file --mime {}) =~ binary ]] && 
                 echo {} is a binary file ||
                 (bat --style=numbers --color=always {} ||
                  highlight -O ansi -l {} ||
                  coderay {} ||
                  rouify {} ||
                  cat {}) 2> /dev/null | head -500'
}
#+end_src

*** Pyenv

#+begin_src bash :tangle ~/.zshenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
#+end_src

*** Chrome

Set chrome executable, its useful for things like headless chrome during testing.
#+begin_src bash :tangle ~/.zshenv
export CHROME_EXECUTABLE=google-chrome-stable
#+end_src

** RC

#+begin_src bash :tangle ~/.zshrc
homedir=~
eval homedir=$homedir
# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH
export EVENT_NOKQUEUE=1

# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh
DEFAULT_USER="markwoodhall"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="refined"
SHARE_HISTORY="false"

plugins=(archlinux git postgres tmux lein npm zsh-autosuggestions mercurial aws docker docker-compose terraform)

source $ZSH/oh-my-zsh.sh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source /usr/share/fzf/key-bindings.zsh
source ~/.zshenv
source /usr/share/nvm/init-nvm.sh

# added by pipsi (https://github.com/mitsuhiko/pipsi)
export PATH="/home/markwoodhall/.local/bin:$PATH"
eval "$(pyenv init --path)"

vterm_printf() {
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ]); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
    alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
fi

#+end_src

* TMUX

** Config

#+begin_src tmux :tangle ~/.tmux.conf
set -g default-terminal "tmux"
set -g base-index 1
set -g pane-base-index 1
set -g set-titles on
set -g status-keys vi
set -s escape-time 0
set -g set-clipboard on
set -g history-limit 50000
set -g mode-keys vi

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind H split-window -h
bind V split-window -v
bind r source-file ~/.tmux.conf

bind -T copy-mode-vi y send-keys -X copy-pipe 'xclip -in -selection clipboard'

set-option -g automatic-rename off

set -g status-position top

set -g status-justify "left"
set -g status "on"
set -g message-command-style bg="#1E1E2E",fg="#cdd6f4"
set -g status-left-length "100"
set -g pane-active-border-style bg="#1E1E2E",fg="#1E1E2E"
set -g status-style bg="#1E1E2E"
set -g pane-border-style bg="#1E1E2E",fg="#11111B"
set -g message-style bg="#1E1E2E",fg="#cdd6f4"
set -g status-right-length "100"
setw -g window-status-activity-style bg="#1E1E2E",fg="#65737e"
set -g status-left ""
set -g status-right ""
setw -g window-status-format "#[nobold,nounderscore,noitalics]#[default] #I #W #[nobold,nounderscore,noitalics]"
setw -g window-status-current-format "#[nobold,nounderscore,noitalics]#[] #I #W #[nobold,nounderscore,noitalics]"
set -g window-status-current-style bg="#11111b",fg="#cdd6f4"
setw -g window-status-style bg="#1e1e2e",fg="#65737e"
set-option -g automatic-rename off

set -g @plugin 'tmux-plugins/tpm'
run '~/.tmux/plugins/tpm/tpm'
#+end_src

Theming

* Picom

#+begin_src bash :tangle ~/.config/picom/picom.conf :mkdirp yes
corner-radius = 9.0;
shadow = true;
shadow-radius = 12;
shadow-offset-x = -6;
shadow-offset-y = -6;
shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@:c"
];
fading = true

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
# fade-in-step = 0.028
fade-in-step = 0.03;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
# fade-out-step = 0.03
fade-out-step = 0.03;
inactive-opacity = 1;

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
# frame-opacity = 1.0
frame-opacity = 1;

# Default opacity for dropdown menus and popup menus. (0.0 - 1.0, defaults to 1.0)
# menu-opacity = 1.0

# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
# inactive-opacity-override = true
inactive-opacity-override = true;

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
active-opacity = 1 
# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ''
blur-kern = "3x3box";

# Exclude conditions for background blur.
# blur-background-exclude = []
blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@:c"
];

# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
#
# backend = 'glx'
backend = "glx";

# Enable/disable VSync.
# vsync = false
vsync = true

# Try to detect WM windows (a non-override-redirect window with no 
# child that has 'WM_STATE') and mark them as active.
#
# mark-wmwin-focused = false
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
# mark-ovredir-focused = false
mark-ovredir-focused = true;

# Try to detect windows with rounded corners and don't consider them 
# shaped windows. The accuracy is not very high, unfortunately.
#
# detect-rounded-corners = false
detect-rounded-corners = true;

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
#
# detect-client-opacity = false
detect-client-opacity = true;

# detect-transient = false
detect-transient = true
# detect-client-leader = false
detect-client-leader = true
# no-use-damage = false
use-damage = true
# log-level = "debug"
log-level = "warn";
#window-shader-fg-rule = [
#    "/home/markwoodhall/dotfiles/lebarshader.frag:window_type = 'dock'"
#]
# rounded-corners-exclude = [
#   "window_type = 'dock'"
# ];
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = true; opacity = 1; focus = false; full-shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
#+end_src

* GTK

** GTK 3

#+begin_src bash :tangle ~/.config/gtk-3.0/settings.ini :mkdirp yes
[Settings]
gtk-theme-name=catppuccin-macchiato-lavender-standard+default
gtk-icon-theme-name=Papirus-Dark
gtk-font-name=System-ui 11
gtk-cursor-theme-name=Adwaita
gtk-cursor-theme-size=24
gtk-toolbar-style=GTK_TOOLBAR_ICONS
gtk-toolbar-icon-size=GTK_ICON_SIZE_LARGE_TOOLBAR
gtk-button-images=0
gtk-menu-images=0
gtk-enable-event-sounds=1
gtk-enable-input-feedback-sounds=0
gtk-xft-antialias=1
gtk-xft-hinting=1
gtk-xft-hintstyle=hintslight
gtk-xft-rgba=rgb
gtk-application-prefer-dark-theme=0
#+end_src

* Rofi

** Theme

#+begin_src javascript :tangle ~/.local/share/rofi/themes/catppuccin-macchiato.rasi :mkdirp yes
 * {
    bg-col:  #24273a;
    bg-col-light: #24273a;
    border-col: #24273a;
    selected-col: #24273a;
    blue: #8aadf4;
    fg-col: #cad3f5;
    fg-col2: #ed8796;
    grey: #6e738d;

    width: 600;
    font: "System-ui 14";
}

element-text, element-icon , mode-switcher {
    background-color: inherit;
    text-color:       inherit;
}

window {
    height: 360px;
    border: 3px;
    border-color: @border-col;
    background-color: @bg-col;
}

mainbox {
    background-color: @bg-col;
}

inputbar {
    children: [prompt,entry];
    background-color: @bg-col;
    border-radius: 5px;
    padding: 2px;
}

prompt {
    background-color: @blue;
    padding: 6px;
    text-color: @bg-col;
    border-radius: 3px;
    margin: 20px 0px 0px 20px;
}

textbox-prompt-colon {
    expand: false;
    str: ":";
}

entry {
    padding: 6px;
    margin: 20px 0px 0px 10px;
    text-color: @fg-col;
    background-color: @bg-col;
}

listview {
    border: 0px 0px 0px;
    padding: 6px 0px 0px;
    margin: 10px 0px 0px 20px;
    columns: 2;
    lines: 5;
    background-color: @bg-col;
}

element {
    padding: 5px;
    background-color: @bg-col;
    text-color: @fg-col  ;
}

element-icon {
    size: 25px;
}

element selected {
    background-color:  @selected-col ;
    text-color: @fg-col2  ;
}

mode-switcher {
    spacing: 0;
  }

button {
    padding: 10px;
    background-color: @bg-col-light;
    text-color: @grey;
    vertical-align: 0.5; 
    horizontal-align: 0.5;
}

button selected {
  background-color: @bg-col;
  text-color: @blue;
}

message {
    background-color: @bg-col-light;
    margin: 2px;
    padding: 2px;
    border-radius: 5px;
}

textbox {
    padding: 6px;
    margin: 20px 0px 0px 20px;
    text-color: @blue;
    background-color: @bg-col-light;
}
#+end_src

** Config

#+begin_src javascript :tangle ~/.config/rofi/config.rasi :mkdirp yes
configuration{
    modi: "run,drun,window";
    icon-theme: "Oranchelo";
    show-icons: true;
    terminal: "kitty";
    drun-display-format: "{icon} {name}";
    location: 0;
    disable-history: false;
    hide-scrollbar: true;
    display-drun: "   Apps ";
    display-run: "   Run ";
    display-window: " 﩯  Window";
    display-Network: " 󰤨  Network";
    sidebar-mode: true;
}

@theme "catppuccin-macchiato"
#+end_src

* Lebar

Lebar is a system toolbar configured with fennel

#+begin_src fennel :tangle ~/.local/share/love/lebar/rc.fnl :mkdirp yes
(local config {})

(local blocks (require "blocks.fnl"))
(local themes (require "themes.fnl"))
(local lib (require "lib.fnl"))

(set config.refresh-seconds 0.001)

;; When set to true this will cause the render loop to 
;; pause and wait for something to appear on the draw channel
;; When set to false the render loop will only pause based on
;; config.refresh-seconds
(set config.render-on-change true)

(set config.font "JetBrainsMonoNerdFont-Regular.ttf")
(set config.font-size 16)

; set the window position and margins
(set config.window {})
(set config.window.position :top)
(set config.window.margin 4)
(set config.window.height 27)

; set the theme
(set config.theme themes.catppuccin)
(set config.background-color config.theme.black)
(set config.foreground-color config.theme.text)

(set config.block {})

; configuration for the separator block
(set config.block.separator (lib.default-settings config.theme))
(set config.block.separator.padding-x 2)
(set config.block.separator.text "|")
(set config.block.separator.foreground-color config.theme.gray-3)

; configuration for the time block
(set config.block.time (lib.default-settings config.theme))
(set config.block.time.format "%%a %%d, %%H:%%M")

; configuration for the power block
(set config.block.power (lib.default-settings config.theme))
(set config.block.power.include-remaining-time true)

; configuration for the shell block
(set config.block.shell (lib.default-settings config.theme))

; configuration for the memory block
(set config.block.memory (lib.default-settings config.theme))
(set config.block.memory.label " MEM ")

; configuration for the dunst block
(set config.block.dunst (lib.default-settings config.theme))
(set config.block.dunst.label " ")

; configuration for the user block
(set config.block.user (lib.default-settings config.theme))
(set config.block.user.label " ")
(set config.block.user.background-color config.theme.blue)
(set config.block.user.foreground-color config.theme.black)

; configuration for the cpu block
(set config.block.cpu (lib.default-settings config.theme))
(set config.block.cpu.label " CPU ")
(set config.block.cpu.ok-threshold 50)

; configuration for the window-title block
(set config.block.window-title (lib.default-settings config.theme))
(set config.block.window-title.love-font (love.graphics.newFont "JetBrainsMonoNerdFont-Italic.ttf" 14))
(set config.block.window-title.label " ")
(set config.block.window-title.foreground-color config.theme.gray-2)

; configuration for the i3-workspace block
(set config.block.i3-workspace (lib.default-settings config.theme))

; configuration for the free-disk-space block
(set config.block.free-disk-space (lib.default-settings config.theme))
(set config.block.free-disk-space.label " ")

; configuration for the pacman block
(set config.block.pacman (lib.default-settings config.theme))
(set config.block.pacman.label "  ")

; configuration for the i3-binding-state block
(set config.block.i3-binding-state (lib.default-settings config.theme))
(set config.block.i3-binding-state.label " ")

; configuration for the wmctrl block
(set config.block.wmctrl (lib.default-settings config.theme))
(set config.block.wmctrl.margin (+ config.block.wmctrl.margin 1))
(set config.block.wmctrl.border [0 0 1 0])
(set config.block.wmctrl.radius 0)

(set config.blocks 
     {:left 
      [blocks.user
       blocks.separator
       blocks.wmctrl
       blocks.window-title]
      :right 
      [blocks.time 
       blocks.separator
       blocks.power
       blocks.separator
       blocks.memory
       blocks.separator
       blocks.cpu]})

config

(fn hostname []
  (let [f (io.popen "/bin/hostname")
        host (or (f:read "*a") "")
        host (string.gsub host "\n$" "")]
    (f:close)
    host))

(set config.blocks 
     {:left 
      [blocks.user
       blocks.separator
       blocks.wmctrl
       blocks.window-title]
      :right 
      [blocks.time 
       blocks.separator
       blocks.power
       blocks.separator
       blocks.memory
       blocks.separator
       blocks.cpu
       blocks.separator
       {:load (partial (. blocks.free-disk-space :load) "/dev/nvme0n1p2" "ssd")
        :draw (partial (. blocks.free-disk-space :draw) "/dev/nvme0n1p2" "ssd" "/ ")}
       blocks.separator
       (when (= (hostname) "thinker")
         {:load (partial (. blocks.free-disk-space :load) "/home" "data")
          :draw (partial (. blocks.free-disk-space :draw) "/home" "data" "/home ")})
       (when (= (hostname) "archy")
         {:load (partial (. blocks.free-disk-space :load) "/mnt/data" "data")
          :draw (partial (. blocks.free-disk-space :draw) "/mnt/data" "data" "DATA ")})
       blocks.separator
       blocks.pacman]})

config
#+end_src

Programming Languages and associated tools

* Clojure

** Kondo

#+begin_src clojure :tangle ~/.config/clj-kondo/config.edn :mkdirp yes
{:lint-as {day8.re-frame.tracing/fn-traced clojure.core/fn}
 :linters {:clojure-lsp/unused-public-var {:level :warning
                                           :exclude-regex #{".*events/.*"}}
           :unresolved-var {:exclude [clova.core/email?
                                      clova/=?
                                      clova.core/required?
                                      clova.core/not-empty?
                                      clova.core/exists?
                                      clova.core/numeric?
                                      clova.core/one-of?
                                      clova.core/not-exists?]}}}
#+end_src

** lein
#+begin_src clojure :tangle ~/.lein/profiles.clj :mkdirp yes
{:user
 {:plugins [[nrepl "1.3.0"]
            [cider/cider-nrepl "0.49.3"]
            [refactor-nrepl "3.6.0"]]
  :dependencies [[org.clojure/tools.namespace "1.3.0"]
                 [org.clojure/tools.reader "1.3.6"]]}}
 #+end_src

** shadow
#+begin_src clojure :tangle ~/.shadow-cljs/config.edn :mkdirp yes
;; shadow-cljs configuration
{;; ADD - CIDER-nREPL middleware required by Fireplace.vim
 :dependencies
 [[cider/cider-nrepl "0.22.4"]]}
 #+end_src

* Git

** Config

#+begin_src bash :tangle ~/.gitconfig
[user]
    name = Mark Woodhall
    email = mark.woodhall@gmail.com
    signingkey = 6814C0C7A2E45188
[color]
    ui = auto
[merge]
    tool = fugitive
    stat = true
    conflictstyle = diff3
[push]
    default = current
[commit]
    ;;gpgsign = true
[diff]
    cmd = nvim -f -c \"Gvdiff\" \"$LOCAL\" \"$REMOTE\"
    colorMoved = default
[difftool]
    prompt = false
[alias]
    vimdiff = difftool
[github]
    user = markwoodhall
[rebase]
    autoStash = true
[pull]
    rebase = true
[safe]
    directory = /opt/flutter
[core]
    pager = delta
    excludesfile = ~/.gitignore
[interactive]
    diffFilter = delta --color-only
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
    line-numbers = true
    minus-style =  "#f38ba8" bold dim "#2f343f"
    plus-style = "#a6e3a1" bold dim  "#2f343f"
[init]
    defaultBranch = main
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
#+end_src

* Kitty

** Config

   Kitty is the terminal of choice, configured with JetBrains Mono and Catppuccin colors.

#+begin_src bash :tangle ~/.config/kitty/kitty.conf :mkdirp yes
font_family      JetBrains Mono Nerd Font
bold_font        JetBrains Mono Bold Nerd Font Complete
italic_font      JetBrains Mono Italic Nerd Font Complete
bold_italic_font JetBrains Mono Bold Italic Nerd Font Complete
font_size 10.9

placement_strategy left

# The basic colors
foreground              #CDD6F4
background              #1E1E2E
selection_foreground    #1E1E2E
selection_background    #F5E0DC

# Cursor colors
cursor                  #F5E0DC
cursor_text_color       #1E1E2E

# URL underline color when hovering with mouse
url_color               #F5E0DC

# Kitty window border colors
active_border_color     #B4BEFE
inactive_border_color   #6C7086
bell_border_color       #F9E2AF

# OS Window titlebar colors
wayland_titlebar_color system
macos_titlebar_color system
hide_window_decoration yes
hide_titlebar yes
x11_hide_window_decorations yes

# Tab bar colors
active_tab_foreground   #11111B
active_tab_background   #CBA6F7
inactive_tab_foreground #CDD6F4
inactive_tab_background #181825
tab_bar_background      #11111B

# Colors for marks (marked text in the terminal)
mark1_foreground #1E1E2E
mark1_background #B4BEFE
mark2_foreground #1E1E2E
mark2_background #CBA6F7
mark3_foreground #1E1E2E
mark3_background #74C7EC

# The 16 terminal colors

# black
color0 #45475A
color8 #585B70

# red
color1 #F38BA8
color9 #F38BA8

# green
color2  #A6E3A1
color10 #A6E3A1

# yellow
color3  #F9E2AF
color11 #F9E2AF

# blue
color4  #89B4FA
color12 #89B4FA

# magenta
color5  #F5C2E7
color13 #F5C2E7

# cyan
color6  #94E2D5
color14 #94E2D5

# white
color7  #BAC2DE
color15 #A6ADC8

window_padding_width 0 0 0 4
window_margin_width 1 0 0 3
linux_display_server x11
repaint_delay 5
input_delay 1
#+end_src

* Wezterm

** Config

    Fennel is used to configure wezterm, this lua is used to bootstrap that. The fennel can be found in .config/.wezterm.

#+begin_src fennel :tangle ~/.config/wezterm/wezterm.lua :mkdirp yes
debug = {traceback = function() end}
local fennel = require("./fennel").install()
fennel.path = fennel.path .. ";.config/wezterm/?.fnl"
return require("config")
#+end_src
* Postgres

** Config

#+begin_src bash :tangle ~/.psqlrc
\x off
\timing on
\pset null '[null]'
\set HISTFILE ~/psql_history/.psql_history- :DBNAME
#+end_src
